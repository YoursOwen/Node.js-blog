/**!
 * Copyright(c) cnpmjs.org and other contributors.
 * MIT Licensed
 *
 * Authors:
 *  fengmk2 <fengmk2@gmail.com> (http://fengmk2.com)
 *  dead_horse <dead_horse@qq.com> (http://deadhorse.me)
 */

'use strict';

/**
 * Module dependencies.
 */

require('colors');
var debug = require('debug')('cnpm:origin');
var match = require('auto-correct');
var spawn = require('cross-spawn');
var fs = require('fs');
var path = require('path');
var config = require('./config');
var parseArgv = require('./parse_argv');
var binaryMirrorConfig = require('binary-mirror-config').china

var program = parseArgv();

var rawArgs = program.rawArgs.slice(2);
var args = [];

var isInstall = false;
var isWin = /^win/.test(process.platform);
var hasCNPM = false;

for (var i = 0; i < rawArgs.length; i++) {
  var arg = rawArgs[i];
  if (arg[0] !== '-') {
    arg = correct(arg);
    if (arg === 'tnpm') {
      arg = '@tencent/tnpm'
      console.log('redirect from `tnpm` to `@tencent/tnpm`')
    }

    if (i === 0 && (arg === 'i' || arg === 'install')) {
      isInstall = true;
    }
    if (arg === '@tencent/tnpm') {
      hasCNPM = true;
    }
  }
  args.push(arg);
}

var CWD = process.cwd();

if (program.userconfig && !fs.existsSync(program.userconfig)) {
  // make sure userconfig exists
  // or it will throw: npm ERR! Error: default value must be string or number
  fs.writeFileSync(program.userconfig, 'email =\n');
}

args.unshift('--registry=' + program.registry);
args.unshift('--cache=' + program.cache);
if (program.disturl) {
  args.unshift('--disturl=' + program.disturl);
}
if (program.userconfig) {
  args.unshift('--userconfig=' + program.userconfig);
}
if (program.proxy) {
  args.unshift('--proxy=' + program.proxy);
}

function getBinaryMirrorsFromConfig() {
  var result = {}

  for (var binName in binaryMirrorConfig) {
    var hostInfo = binaryMirrorConfig[binName]
    var tnpmMirrorUrl = replaceWithTnpmMirror(hostInfo.host)

    if (tnpmMirrorUrl && Object.keys(hostInfo).length === 1) {
      result[binName] = tnpmMirrorUrl
    }
  }
  return result
}

// 各种二进制包的参数
// https://github.com/cnpm/binary-mirror-config/blob/master/package.json
var binaryMirrors = Object.assign(getBinaryMirrorsFromConfig(), {
  // 镜像 npm.taobao.org/mirrors
  debug: config.mirrorsUrl + '/node-inspector/',
  profiler: config.mirrorsUrl + '/node-inspector/',
  node_sqlite3: config.mirrorsUrl + '/',
  grpc_node: config.mirrorsUrl + '/',
  fse: config.mirrorsUrl + '/fsevents/',
})
for (var binName in binaryMirrors) {
  args.unshift('--' + binName + '_binary_host_mirror=' + binaryMirrors[binName])
}


function findNpmBin() {
  if (isWin && isInstall && hasCNPM) {
    // windows在用tnpm安装tnpm的时候，不能自己覆盖自己
    return path.join(path.dirname(process.execPath), 'npm')
  }
  return path.join(__dirname, 'node_modules', '.bin', 'npm');
}

var npmBin = findNpmBin();

debug('%s %s', npmBin, args.join(' '));

// 只有能被成功替换的才是能被使用的 mirror url，否则不要使用
function replaceWithTnpmMirror(url) {
  if (!url) {
    return ''
  }
  if (url.indexOf('https://cdn.npm.taobao.org') > -1) {
    return url.replace('https://cdn.npm.taobao.org', config.taobaoNpmCdnUrl)
  } else if (url.indexOf('https://npm.taobao.org/mirrors') > -1) {
    return url.replace('https://npm.taobao.org/mirrors', config.mirrorsUrl)
  }
  return ''
}
// 环境变量
function getEnvFromConfig() {
  var result = {}
  for (var k in binaryMirrorConfig.ENVS) {
    var v = binaryMirrorConfig.ENVS[k]
    var tnpmMirrorUrl = replaceWithTnpmMirror(v)
    if (tnpmMirrorUrl) {
      result[k] = tnpmMirrorUrl
    }
  }
  return result
}
var env = getEnvFromConfig()

for (var k in process.env) {
  env[k] = process.env[k];
}
// https://github.com/lovell/sharp/blob/master/install/libvips.js
env['SHARP_DIST_BASE_URL'] = `${config.taobaoNpmCdnUrl}/dist/sharp-libvips/`

var npm  = spawn(npmBin, args, {
  env: env,
  cwd: CWD,
  stdio: [
    process.stdin,
    process.stdout,
    process.stderr,
  ]
});

npm.on('exit', function (code, signal) {
  process.exit(code);
});

/**
 * correct command
 * @return {[type]} [description]
 */
function correct(command) {
  var cmds = [
    'install',
    'publish',
    'adduser',
    'author',
    'config',
    'unpublish',
  ];
  for (var i = 0; i < cmds.length; i++) {
    if (match(command, cmds[i])) {
      return cmds[i];
    }
  }
  return command;
}
